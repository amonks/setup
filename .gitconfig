[column]
        ui = auto

[branch]
        sort = -committerdate

[tag]
        sort = version:refname

[init]
        defaultBranch = main

[diff]
        algorithm = histogram
        colorMoved = plain
        mnemonicPrefix = true
        renames = true

[push]
        default = simple
        autoSetupRemote = true
        followTags = true

[fetch]
        prune = true
        pruneTags = true
        all = true

[branch "main"]
	rebase = true

[branch "master"]
	rebase = true

[merge "ours"]
	driver = true

[user]
	email = a@monks.co
	name = monks

[gc]
	auto = 0

[init]
	defaultBranch = main

[advice]
	skippedCherryPicks = false

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[safe]
	directory = /Users/ajm/Work
	directory = /Users/ajm/Work/monks.co

[help]
	autocorrect = 1

[core]
	editor = nvim
	# pager = delta --theme=zenburn

[alias]
	r = "!f() { git fetch && git rebase $(git main-remote) --exec \"git commit --amend \\\"--date=$(date)\\\" --no-edit\" ; }; f"
	ri = "!f() { git fetch && git rebase -i $(git main-remote) && git rebase $(git main-remote) --exec \"git commit --amend \\\"--date=$(date)\\\" --no-edit\" ; }; f"
	i = "!f() { git fetch && git rebase -i $(git main-remote) ; }; f"
	p = "!f() { branch=$(git rev-parse --abbrev-ref HEAD) ; while ! git push --force-with-lease --set-upstream -- origin $branch ; do echo retrying push ; done ; }; f"
	rp = "!f() { git r && git p ; }; f"
	rip = "!f() { git ri && git p ; }; f"

	each = "!f() { git fetch && git rebase $(git main-remote) --exec \"$@; git add . && git commit --amend --no-edit\" ; }; f"
	troy-each = "!f() { git fetch && git rebase $(git main-remote) --exec \"cd $BACKEND_ROOT/mobile/Troy; $@; cd $BACKEND_ROOT; git add . && git commit --amend --no-edit\" ; }; f"

	ri-test = "!f() { git fetch && git rebase $(git main-remote) -i --exec \"regen && git add . && git commit --amend --no-edit\" && git r ; }; f"

	main-branch = "!f() { git branch -l master main | tr -d '*' | awk '{ print $1 }' | head -n1 ; }; f"
	main-remote = "!f() { echo "origin/$(git main-branch)" ; }; f"

	main = "!f() { git status --porcelain && git fetch && git checkout $(git main-branch) && git reset --hard $(git main-remote) ; }; f"
	master = "!f() { git main ; }; f"

	devbox = "!f() { git fetch && git checkout $(ssh devbox 'cd ~/co/backend && git rev-parse --short HEAD'); }; f"

	clone-github = "!f() { repo=\"$1\" ; git clone git@github.com:$repo.git ; } ; f"
	clone-my = "!f() { repo=\"$1\" ; git clone-github amonks/$1 ; } ; f"

	# check out a new branch from safe main
	new-branch = "!f() { git fetch && git checkout -b $1 && git reset --hard $(git main-remote); }; f"

	# diff branch by message
	miff = "!f() { commit-message-diff $1 $2 | column -t -s'\t' ; }; f"

	# commit
	c = "commit -pv"

	stat = "show --stat"
	uncommit = "reset HEAD~"

	#
	summon = "!f() { b=$1&& git fetch origin +refs/heads/$b:refs/remotes/origin/$b $b:$b ; }; f"
	branches = "branch --sort=-committerdate"
	touching = "rev-list --all --format=%B"
	choose = "!f() { git branches | fzf | sed 's/^\\* //g' | xargs echo -n ; }; f"
	change = "!f() { git checkout $(git choose); }; f"

	backtrack = "rebase -i HEAD~10"

