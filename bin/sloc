#!/usr/bin/env fish

if test "$argv" = "--help"
  echo "usage: sloc <COLUMN...>"
  echo "COLUMN is one of (dir, ext, name, path, author, lines)"
  exit 0
end

git ls-files | gawk "!/.pdf\$/ && !/.lock\$/ && !/.mdx\$/" | xargs -n1 git --no-pager blame --show-name -- | gawk "
BEGIN {
  split(\"$argv\", argv, \" \")
  cols = \"\"
  for (i in argv)        cols = cols toupper(argv[i]) \"\\t\"
  if (cols !~ /LINES/)   cols = cols \"LINES\" \"\\t\"
  print cols
}

{
  path = \$2
  
  name = substr(\$3, 2)
  if (name == \"Not\") name = \"uncommitted\"

  split(path, parts, \"/\")
  dir = \"root\"
  if (length(parts) > 1)            dir = parts[1] 
  if (substr(dir, 1, 1) == \".\")   dir = \"root\"

  split(path, parts, \".\")
  ext = parts[length(parts)]
  if (length(parts) == 1)   ext = \"none\"
  if (dir == \"bin\")       ext = \"bash\"
  if (dir == \"root\")      ext = \"config\"
  if (ext ~ \"/\")          ext = \"none\"

  key = \"\"
  for (i in argv) {
    arg = argv[i]
    if (arg == \"dir\")      key = key   dir         \"\\t\"
    if (arg == \"ext\")      key = key   ext         \"\\t\"
    if (arg == \"author\")   key = key   name        \"\\t\"
    if (arg == \"path\")     key = key   path        \"\\t\"
    if (arg == \"lines\")    key = key   \"LINES\"   \"\\t\"
  }
  if (key !~ /LINES/)        key = key   \"LINES\"   \"\\t\"

  stats[key] += 1
}

function compare_parts(_1, a, _2, b) {
  split(a, a_parts, \"\\t\")
  split(b, b_parts, \"\\t\")

  if (length(a_parts) != length(b_parts)) {
    return -1
  }

  for (i in a_parts) {
    a_part = a_parts[i]
    b_part = b_parts[i]

    is_numeric = a_part ~ /[0-9]+/

    if (is_numeric && (a_part + 0) > (b_part + 0)) {
      return -1
    }
    if (!is_numeric && a_part < b_part) {
      return -1
    }
    if (is_numeric && (a_part + 0) < (b_part + 0)) {
      return 1
    }
    if (!is_numeric && a_part > b_part) {
      return 1
    }
  }
  return 0
}

END {
  for (k in stats) {
    gsub(/LINES/, stats[k], k)
    rows[k] = k
  }

  asort(rows, sorted, \"compare_parts\")

  for (i in sorted) {
    print sorted[i]
  }
}" | column -t

